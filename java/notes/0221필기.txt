*쓰레드: 프로세스 내 세부 작업 단위
	=> 여러 작업의 진행이 필요하다면 쓰레드를 여러 개 만들어 둔다

	- 쓰레드의 생성
		1) 상속
		2) 러너블 인터페이스
			run()메서드 구현 => 메서드 내에 작업 작성
			new Thread(runnable 구현 객체); // 런 메서드를 사용하는 구현 객체
			start(); // 쓰레드가 대기 상태가 됨, 스케줄러가 임의로 쓰레드 선택하여 동작
					 // 블로킹, 대기에 걸릴 경우 다른 쓰레드 중 대기하고 있는 쓰레드 선택하여 수행
		3) Synchronized: 동기화 블록 / 블로킹에 활용

	-우선 순위
	 : 커널 레벨 쓰레드의 경우 생성할 때 지정한 우선순위가 적용되지 않는다.
	  => 자바의 경우 쓰레드 우선 순위X

	동기화

*쓰레드의 종류
	-커널 레벨 쓰레드: 운영체제에서 지원하는 쓰레드 / 자바에서는 커널 레벨 쓰레드 사용
	-사용자 레벨 쓰레드: 사용자 영역에서 쓰레드 연산 / 자바에서 지원하지 않는 형식

*인터페이스
 :추상 메서드와 상수만 가지고 있음 => 타 클래스에서 오버라이딩하여 구현 객체를 만들어 사용한다.
  interface var = new 구현클래스(); // 객체 안에서 인터페이스로부터 물려받은 요소를 사용할 수 있다.
	-runnable 인터페이스 : run 메서드 하나만 가지고 있음, 오버라이딩 필수
		Runnable - public (abstract) void run();
		class A implement Runnable{
			public void run(){}
			Runnable r = ()->{System.out.println("run구현");
			} // Runnable 인터페이스는 한 개의 추상 메서드만 가지고 있으므로 람다식으로 이름을 생략할 수 있다.
		}
	- 화살표가 있거나 ;가 2개 있는 경우 람다식을 사용했다고 볼 수 있다.	
	- 매개변수가 없을 경우 괄호 생략 불가

*람다식으로 변환하기 예제
int max(int a, int b){
	return a > b ? a : b;
}
=> (a, b) -> a > b? a : b

void printVar(String name, int i){
	System.out.println(name + "=" + i);
}
=> (name, i) -> System.out.println(name + "=" + i)

int square(int x){
	return x * x;
}
=> x -> x * x;

int roll(){
	return (int)(Math.random() * 6);
}
=> () -> (int)(Math.random() * 6)

int sumArr(int[] arr) {
	int sum = 0;
	for(int i : arr)
		sum += i;
	return sum;
}
=> 

int[] emptyArr() {
	return new int[]{};
}
=> () -> new int[]{}