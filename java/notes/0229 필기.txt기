캡슐화
싱글턴
1. private 생성자
2. private static 변수 = new 생성자();
3. public static 클래스타입 메서드명(){
	return 변수;
}

다형성 : 조상타입의 참조변수로 자손의 객체를 다루는 것.
	   조상타입의 변수가 사용하는 멤버는 자손 객체 안에 다 있기 때문에
	   다형성이 허용된다. 단 자손의 모든 멤버를 사용할 수 있는 것은 아니고
	   조상으로부터 물려받은 멤버만 사용할 수 있다.
	   
	  Object 타입의 변수는 모든 타입의 객체를 저장할 수 있다.
	  String s = "Test";
	  Object o = "Test";
	  Object o2 = new Date();
	  Object o3 = new Tv();

형변환(캐스팅)
기본형 -> 기본형
작은 타입에서 큰 타입으로 자동 변환(명시도 가능)
큰 타입에서 작은 타입으로 변환 불가 - 정보의 손실이 발생할 수 있음
단, 명시-(타입) 하는 경우 변환이 가능(손실 발생)

기본형 <-> 참조형
기본형과 참조형 간의 형변환은 불가능하다.
int i = "100"; // error
string s = 100; // error
만약 타입을 바꿔야 한다면 연산자나 메서드를 이용해서 바꿔 준다.
int -> String : 빈 문자열을 더해 준다.
100 + ""; => 문자열 100

String -> int
Interger.parseInt("숫자로 이루어진 문자열");

참조형 -> 참조형
*참조형과 참조형 간에 관계가 없으면 형변환이 불가능하다
String s = new Date();
-> String은 final 클래스이기 때문에 Super 클래스가 될 수 없음
-> 상속관계가 이루어 질 수 없음
*상속 관계에 있는 타입 간에는 형변환이 가능하다
1. sub -> super : up 캐스팅 => 명시의 필요성 X
2. super -> sub : down 캐스팅 => 어떤 sub 클래스로 바꿀 지 반드시 타입을 명시해야 한다

단순히 형변환으로 끝내는 것이 아니라 실제 참조하는 객체의 타입까지 생각해서 변환시켜야한다
->instanceof : 형변환이 가능한지 확인하는 연산자