<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<bean name="writeArticleService"  class="spring.ch01.WriteArticleServiceImpl" > <!-- 해당 문서를 객체로 만들었다. -->
		<constructor-arg>
			<ref bean="articleDao" /> <!-- articleDao bean을 참조 -->
		</constructor-arg>
	</bean>
	<bean name="articleDao" class="spring.ch01.MySQLArticleDao"/>
	<bean id="bar" class="spring.di.Bar"/>
	<!-- <bean id="bar1" class="spring.di.Bar"/>: 해당 속성의 type이 겹치면 NoUniqueBeanDefinitionException 발생 -->
	<bean id="bar1" class="spring.di.Bar" autowire-candidate="false"/>
	<!-- autowire-candidate를 false로 설정하면 autowire 대상에서 제외된다. -->
	<bean id="baz" class="spring.di.Baz"/>
	<!-- bean의 이름 패턴은 클래스 이름을 그대로 가져 오되 소문자로 시작하는 경우가 많다. -->
	<bean id="fooo" class="spring.di.Fooo" init-method="start" destroy-method="stop">
		<lookup-method name="getBar" bean="bar"/> <!-- lookup 메서드 오버라이딩 -> container의 Bar 객체 주입 -->
	</bean>
	<bean id="foo" class="spring.di.Foo" p:count="4" p:str="5번째 Foo bean"
		autowire="byType"/> <!-- 기본 설정과 autowire 혼합 가능 -->
<!-- 	<bean id="foo" class="spring.di.Foo"
		p:bar-ref="bar" p:count="3" p:str="4번째 Foo bean"/> -->
<!-- 	<bean id="foo" class="spring.di.Foo">
		<property name="bar" ref="bar"/> setter를 가지고 있는 변수명
		<property name="count" value="2"/> 
		<property name="str"><value>3번째 Foo bean</value></property>
	</bean> -->
<!-- 	<bean id="foo" class="spring.di.Foo">
		<constructor-arg ref="bar"/>
		<constructor-arg ref="baz"/>
		<constructor-arg value="1" type="int"/> 
		value는 type을 명시하지 않으면 String 값을 먼저 찾는다.
		<constructor-arg>
			<value>2번째 Foo bean</value>
		</constructor-arg>
	</bean> 
	* 생성자 타입은 자주 사용하지 않는다.-->
	<!-- <bean id="foo" class="spring.di.Foo"/>: 해당 클래스 안에는 기본 생성자가 존재하지 않기 때문에 오류가 난다. -->
<!-- 	<bean id="foo" class="spring.di.Foo">
		<constructor-arg ref="bar"/>
		<constructor-arg>
			<ref bean="baz"/>
		</constructor-arg> 
	</bean> -->
</beans>
